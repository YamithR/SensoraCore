# =====================================================================================
# DI√ÅLOGO DE CALIBRACI√ìN POR REGRESI√ìN LINEAL PARA SENSORACORE
# =====================================================================================
# Ruta del archivo: ui/calibration_dialog.py
# Funci√≥n: Interfaz gr√°fica para calibraci√≥n de sensores por regresi√≥n lineal
# Autor: Sistema SensoraCore
# Prop√≥sito: Permitir al usuario calibrar sensores visualmente

from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, 
                              QTableWidget, QTableWidgetItem, QLabel, QLineEdit,
                              QMessageBox, QGroupBox, QGridLayout, QHeaderView)
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QFont
import matplotlib
matplotlib.use('Qt5Agg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
from modules.calibration import LinearCalibration

class CalibrationDialog(QDialog):
    """
    Di√°logo para calibraci√≥n por regresi√≥n lineal de sensores
    
    Prop√≥sito: Interfaz gr√°fica completa para calibrar sensores anal√≥gicos
    Funcionalidad: 
        - Agregar puntos de calibraci√≥n manualmente
        - Visualizar datos y regresi√≥n en tiempo real
        - Realizar calibraci√≥n autom√°tica
        - Guardar/cargar calibraciones
        - Mostrar estad√≠sticas de calibraci√≥n
    """
      # Se√±al para notificar cambios de calibraci√≥n a la ventana principal
    calibration_updated = Signal(object)
    
    def __init__(self, sensor_name="Sensor", calibration_instance=None, parent=None):
        """
        Inicializar di√°logo de calibraci√≥n
        
        Args:
            sensor_name: Nombre del sensor para personalizar la interfaz
            calibration_instance: Instancia de LinearCalibration existente (opcional)
            parent: Ventana padre
        """
        super().__init__(parent)
        self.sensor_name = sensor_name
        self.calibration = calibration_instance if calibration_instance else LinearCalibration()
        self.setup_ui()
        self.update_plot()
    
    def setup_ui(self):
        """Configurar toda la interfaz de usuario del di√°logo"""
        self.setWindowTitle(f"Calibraci√≥n por Regresi√≥n Lineal - {self.sensor_name}")
        self.setFixedSize(900, 700)  # Tama√±o fijo para mejor dise√±o
        
        # Layout principal vertical
        layout = QVBoxLayout(self)
        layout.setSpacing(10)
        
        # ==================== GRUPO DE ENTRADA DE DATOS ====================
        input_group = QGroupBox("Agregar Punto de Calibraci√≥n")
        input_group.setFont(QFont("Arial", 10, QFont.Bold))
        input_layout = QGridLayout(input_group)
        
        # Campos de entrada
        input_layout.addWidget(QLabel("Valor Crudo del Sensor:"), 0, 0)
        self.raw_input = QLineEdit()
        self.raw_input.setPlaceholderText("Ej: 512 (lectura ADC)")
        input_layout.addWidget(self.raw_input, 0, 1)
        
        input_layout.addWidget(QLabel("Valor Real (Referencia):"), 0, 2)
        self.ref_input = QLineEdit()
        self.ref_input.setPlaceholderText("Ej: 90.0 (grados reales)")
        input_layout.addWidget(self.ref_input, 0, 3)
        
        # Bot√≥n para agregar punto
        self.add_point_btn = QPushButton("‚ûï Agregar Punto")
        self.add_point_btn.clicked.connect(self.add_calibration_point)
        self.add_point_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        input_layout.addWidget(self.add_point_btn, 0, 4)
        
        layout.addWidget(input_group)
        
        # ==================== TABLA DE PUNTOS DE CALIBRACI√ìN ====================
        table_group = QGroupBox("Puntos de Calibraci√≥n")
        table_group.setFont(QFont("Arial", 10, QFont.Bold))
        table_layout = QVBoxLayout(table_group)
        
        self.points_table = QTableWidget(0, 3)  # 3 columnas: Crudo, Referencia, Eliminar
        self.points_table.setHorizontalHeaderLabels(["Valor Crudo", "Valor Referencia", "Acci√≥n"])
        
        # Configurar encabezados de tabla
        header = self.points_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.Fixed)
        self.points_table.setColumnWidth(2, 80)
        
        table_layout.addWidget(self.points_table)
        layout.addWidget(table_group)
        
        # ==================== BOTONES DE CONTROL ====================
        buttons_layout = QHBoxLayout()
        
        # Bot√≥n calibrar
        self.calibrate_btn = QPushButton("üîß Realizar Calibraci√≥n")
        self.calibrate_btn.clicked.connect(self.perform_calibration)
        self.calibrate_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        buttons_layout.addWidget(self.calibrate_btn)
        
        # Bot√≥n limpiar
        self.clear_btn = QPushButton("üóëÔ∏è Limpiar Datos")
        self.clear_btn.clicked.connect(self.clear_data)
        self.clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        buttons_layout.addWidget(self.clear_btn)
        
        # Bot√≥n guardar
        self.save_btn = QPushButton("üíæ Guardar Calibraci√≥n")
        self.save_btn.clicked.connect(self.save_calibration)
        buttons_layout.addWidget(self.save_btn)
        
        # Bot√≥n cargar
        self.load_btn = QPushButton("üìÇ Cargar Calibraci√≥n")
        self.load_btn.clicked.connect(self.load_calibration)
        buttons_layout.addWidget(self.load_btn)
        
        layout.addLayout(buttons_layout)
        
        # ==================== INFORMACI√ìN DE CALIBRACI√ìN ====================
        info_group = QGroupBox("Estado de Calibraci√≥n")
        info_group.setFont(QFont("Arial", 10, QFont.Bold))
        info_layout = QVBoxLayout(info_group)
        
        self.info_label = QLabel("Ecuaci√≥n: No calibrado")
        self.info_label.setFont(QFont("Arial", 9))
        self.info_label.setStyleSheet("padding: 5px; background-color: #f0f0f0; border-radius: 3px;")
        info_layout.addWidget(self.info_label)
        
        layout.addWidget(info_group)
        
        # ==================== GR√ÅFICO ====================
        graph_group = QGroupBox("Visualizaci√≥n de Calibraci√≥n")
        graph_group.setFont(QFont("Arial", 10, QFont.Bold))
        graph_layout = QVBoxLayout(graph_group)
        
        self.figure = Figure(figsize=(8, 4))
        self.canvas = FigureCanvas(self.figure)
        graph_layout.addWidget(self.canvas)
        
        layout.addWidget(graph_group)
        
        # ==================== BOTONES DE DI√ÅLOGO ====================
        dialog_buttons = QHBoxLayout()
        
        self.apply_btn = QPushButton("‚úÖ Aplicar y Cerrar")
        self.apply_btn.clicked.connect(self.accept)
        self.apply_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        dialog_buttons.addWidget(self.apply_btn)
        
        self.cancel_btn = QPushButton("‚ùå Cancelar")
        self.cancel_btn.clicked.connect(self.reject)
        self.cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        dialog_buttons.addWidget(self.cancel_btn)
        
        layout.addLayout(dialog_buttons)
        
        # Conectar Enter para agregar puntos
        self.raw_input.returnPressed.connect(self.add_calibration_point)
        self.ref_input.returnPressed.connect(self.add_calibration_point)
    
    def add_calibration_point(self):
        """A√±ade un punto de calibraci√≥n y actualiza la interfaz"""
        try:
            raw_val = float(self.raw_input.text())
            ref_val = float(self.ref_input.text())
            
            # Agregar al modelo de calibraci√≥n
            self.calibration.add_calibration_point(raw_val, ref_val)
            
            # Actualizar tabla
            row = self.points_table.rowCount()
            self.points_table.insertRow(row)
            self.points_table.setItem(row, 0, QTableWidgetItem(f"{raw_val:.2f}"))
            self.points_table.setItem(row, 1, QTableWidgetItem(f"{ref_val:.2f}"))
            
            # Bot√≥n eliminar para esta fila
            delete_btn = QPushButton("üóëÔ∏è")
            delete_btn.clicked.connect(lambda checked, r=row: self.remove_point(r))
            delete_btn.setStyleSheet("QPushButton { background-color: #f44336; color: white; }")
            self.points_table.setCellWidget(row, 2, delete_btn)
            
            # Limpiar campos
            self.raw_input.clear()
            self.ref_input.clear()
            
            # Actualizar gr√°fico
            self.update_plot()
            
            # Focus al primer campo para siguiente entrada
            self.raw_input.setFocus()
            
        except ValueError:
            QMessageBox.warning(self, "Error de Entrada", 
                              "Por favor ingrese valores num√©ricos v√°lidos.\n\n"
                              "Ejemplo:\n"
                              "Valor Crudo: 512\n"
                              "Valor Referencia: 90.0")
    
    def remove_point(self, row):
        """Elimina un punto de calibraci√≥n espec√≠fico"""
        if 0 <= row < len(self.calibration.calibration_data["raw_values"]):
            # Eliminar del modelo
            del self.calibration.calibration_data["raw_values"][row]
            del self.calibration.calibration_data["reference_values"][row]
            
            # Recrear tabla completa (m√°s simple que manejar √≠ndices)
            self.update_table()
            self.update_plot()
            
            # Resetear calibraci√≥n si hay cambios
            self.calibration.is_calibrated = False
            self.info_label.setText("Ecuaci√≥n: No calibrado (datos modificados)")
    
    def update_table(self):
        """Actualiza la tabla completa con los datos actuales"""
        self.points_table.setRowCount(0)
        raw_vals = self.calibration.calibration_data["raw_values"]
        ref_vals = self.calibration.calibration_data["reference_values"]
        
        for i, (raw_val, ref_val) in enumerate(zip(raw_vals, ref_vals)):
            row = self.points_table.rowCount()
            self.points_table.insertRow(row)
            self.points_table.setItem(row, 0, QTableWidgetItem(f"{raw_val:.2f}"))
            self.points_table.setItem(row, 1, QTableWidgetItem(f"{ref_val:.2f}"))
            
            # Bot√≥n eliminar
            delete_btn = QPushButton("üóëÔ∏è")
            delete_btn.clicked.connect(lambda checked, r=i: self.remove_point(r))
            delete_btn.setStyleSheet("QPushButton { background-color: #f44336; color: white; }")
            self.points_table.setCellWidget(row, 2, delete_btn)
    
    def perform_calibration(self):
        """Realiza la calibraci√≥n y actualiza la interfaz"""
        if self.calibration.perform_calibration():
            self.info_label.setText(f"Ecuaci√≥n: {self.calibration.get_calibration_equation()}")
            self.info_label.setStyleSheet("padding: 5px; background-color: #c8e6c9; border-radius: 3px; color: #2e7d32;")
            self.update_plot()
            
            # Mostrar estad√≠sticas detalladas
            stats = self.calibration.get_calibration_stats()
            QMessageBox.information(self, "Calibraci√≥n Exitosa", 
                                  f"‚úÖ Calibraci√≥n realizada correctamente\n\n"
                                  f"üìà Ecuaci√≥n: {stats['equation']}\n"
                                  f"üìä Puntos utilizados: {stats['num_points']}\n"
                                  f"üéØ Calidad (R¬≤): {stats['r_squared']:.4f}\n\n"
                                  f"üí° R¬≤ cercano a 1.0 indica mejor ajuste")
        else:
            QMessageBox.warning(self, "Error de Calibraci√≥n", 
                              "‚ùå Se necesitan al menos 2 puntos para realizar la calibraci√≥n.\n\n"
                              "üí° Agregue m√°s puntos de referencia conocidos.")
    
    def clear_data(self):
        """Limpia todos los datos y resetea la interfaz"""
        reply = QMessageBox.question(self, "Confirmar Limpieza", 
                                   "‚ö†Ô∏è ¬øEst√° seguro de que desea eliminar todos los datos de calibraci√≥n?\n\n"
                                   "Esta acci√≥n no se puede deshacer.",
                                   QMessageBox.Yes | QMessageBox.No,
                                   QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            self.calibration.clear_calibration_data()
            self.points_table.setRowCount(0)
            self.info_label.setText("Ecuaci√≥n: No calibrado")
            self.info_label.setStyleSheet("padding: 5px; background-color: #f0f0f0; border-radius: 3px;")
            self.update_plot()
    
    def update_plot(self):
        """Actualiza el gr√°fico de calibraci√≥n en tiempo real"""
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        
        raw_vals = self.calibration.calibration_data["raw_values"]
        ref_vals = self.calibration.calibration_data["reference_values"]
        
        if len(raw_vals) > 0:
            # Puntos de calibraci√≥n
            ax.scatter(raw_vals, ref_vals, color='blue', s=50, alpha=0.7, 
                      label='Puntos de Calibraci√≥n', zorder=5)
            
            # L√≠nea de regresi√≥n si est√° calibrado
            if self.calibration.is_calibrated:
                x_min, x_max = min(raw_vals), max(raw_vals)
                x_range = x_max - x_min
                x_line = np.linspace(x_min - x_range*0.1, x_max + x_range*0.1, 100)
                y_line = [self.calibration.calibrate_value(x) for x in x_line]
                ax.plot(x_line, y_line, 'r-', linewidth=2, 
                       label=f'Regresi√≥n Lineal (R¬≤ = {self.calibration.r_squared:.3f})', zorder=3)
                
                # L√≠neas de grilla para los puntos
                for raw, ref in zip(raw_vals, ref_vals):
                    ax.axvline(x=raw, color='gray', linestyle='--', alpha=0.3, zorder=1)
                    ax.axhline(y=ref, color='gray', linestyle='--', alpha=0.3, zorder=1)
                
                ax.legend()
        else:
            # Mensaje cuando no hay datos
            ax.text(0.5, 0.5, 'No hay puntos de calibraci√≥n\n\nAgregue puntos usando los campos de arriba', 
                   horizontalalignment='center', verticalalignment='center',
                   transform=ax.transAxes, fontsize=12, 
                   bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray"))
        
        ax.set_xlabel('Valor Crudo del Sensor')
        ax.set_ylabel('Valor Real (Referencia)')
        ax.set_title(f'Calibraci√≥n por Regresi√≥n Lineal - {self.sensor_name}')
        ax.grid(True, alpha=0.3)
        
        # Mejorar aspecto del gr√°fico
        self.figure.tight_layout()
        self.canvas.draw()
    
    def save_calibration(self):
        """Guarda la calibraci√≥n actual en archivo"""
        if not self.calibration.is_calibrated:
            QMessageBox.warning(self, "Sin Calibraci√≥n", 
                              "‚ùå No hay calibraci√≥n activa para guardar.\n\n"
                              "üí° Primero realice una calibraci√≥n con los datos ingresados.")
            return
        
        filename = f"calibration_{self.sensor_name.lower().replace(' ', '_')}.json"
        if self.calibration.save_calibration(filename):
            QMessageBox.information(self, "Guardado Exitoso", 
                                  f"‚úÖ Calibraci√≥n guardada correctamente\n\n"
                                  f"üìÅ Archivo: {filename}\n"
                                  f"üìà Ecuaci√≥n: {self.calibration.get_calibration_equation()}")
        else:
            QMessageBox.warning(self, "Error de Guardado", 
                              f"‚ùå Error al guardar la calibraci√≥n en {filename}\n\n"
                              "üí° Verifique permisos de escritura en el directorio.")
    
    def load_calibration(self):
        """Carga una calibraci√≥n desde archivo"""
        filename = f"calibration_{self.sensor_name.lower().replace(' ', '_')}.json"
        if self.calibration.load_calibration(filename):
            self.update_table()
            self.info_label.setText(f"Ecuaci√≥n: {self.calibration.get_calibration_equation()}")
            self.info_label.setStyleSheet("padding: 5px; background-color: #c8e6c9; border-radius: 3px; color: #2e7d32;")
            self.update_plot()
            
            stats = self.calibration.get_calibration_stats()
            QMessageBox.information(self, "Carga Exitosa", 
                                  f"‚úÖ Calibraci√≥n cargada correctamente\n\n"
                                  f"üìÅ Archivo: {filename}\n"
                                  f"üìà Ecuaci√≥n: {stats['equation']}\n"
                                  f"üìä Puntos: {stats['num_points']}\n"
                                  f"üéØ Calidad (R¬≤): {stats['r_squared']:.4f}")
        else:
            QMessageBox.warning(self, "Error de Carga", 
                              f"‚ùå No se pudo cargar la calibraci√≥n\n\n"
                              f"üìÅ Archivo buscado: {filename}\n"
                              "üí° Verifique que el archivo existe y es v√°lido.")
    
    def accept(self):
        """Acepta el di√°logo y emite la se√±al de calibraci√≥n actualizada"""
        self.calibration_updated.emit(self.calibration)
        super().accept()
    
    def set_calibration(self, calibration):
        """Establece una calibraci√≥n existente en el di√°logo"""
        self.calibration = calibration
        self.update_table()
        if calibration.is_calibrated:
            self.info_label.setText(f"Ecuaci√≥n: {calibration.get_calibration_equation()}")
            self.info_label.setStyleSheet("padding: 5px; background-color: #c8e6c9; border-radius: 3px; color: #2e7d32;")
        self.update_plot()
